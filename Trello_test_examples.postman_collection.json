{
	"info": {
		"_postman_id": "2ba5c3ee-7aee-4dc6-a2e4-36d06a3c69f8",
		"name": "Trello_test_examples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39640002"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Get All Boards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\");",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"X-Server-Time\");",
									"    pm.response.to.have.header(\"Referrer-Policy\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Schema ---",
									"const schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"id\": { \"type\": \"string\" },",
									"      \"nodeId\": { \"type\": \"string\" },",
									"      \"name\": { \"type\": \"string\" },",
									"      \"desc\": { \"type\": \"string\" },",
									"      \"descData\": { \"type\": [\"string\", \"null\"] },",
									"      \"closed\": { \"type\": \"boolean\" },",
									"      \"dateClosed\": { \"type\": [\"string\", \"null\"] },",
									"      \"idOrganization\": { \"type\": \"string\" },",
									"      \"idEnterprise\": { \"type\": [\"string\", \"null\"] },",
									"      \"limits\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"attachments\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perBoard\": { \"type\": \"object\" },",
									"              \"perCard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"boards\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"totalMembersPerBoard\": { \"type\": \"object\" },",
									"              \"totalAccessRequestsPerBoard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"cards\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"openPerBoard\": { \"type\": \"object\" },",
									"              \"openPerList\": { \"type\": \"object\" },",
									"              \"totalPerBoard\": { \"type\": \"object\" },",
									"              \"totalPerList\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"checklists\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perBoard\": { \"type\": \"object\" },",
									"              \"perCard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"checkItems\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perChecklist\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"customFields\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perBoard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"customFieldOptions\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perField\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"labels\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perBoard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"lists\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"openPerBoard\": { \"type\": \"object\" },",
									"              \"totalPerBoard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"stickers\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perCard\": { \"type\": \"object\" }",
									"            }",
									"          },",
									"          \"reactions\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"perAction\": { \"type\": \"object\" },",
									"              \"uniquePerAction\": { \"type\": \"object\" }",
									"            }",
									"          }",
									"        },",
									"        \"required\": [",
									"          \"attachments\",",
									"          \"boards\",",
									"          \"cards\",",
									"          \"checklists\",",
									"          \"checkItems\",",
									"          \"customFields\",",
									"          \"customFieldOptions\",",
									"          \"labels\",",
									"          \"lists\",",
									"          \"stickers\",",
									"          \"reactions\"",
									"        ]",
									"      },",
									"      \"pinned\": { \"type\": \"boolean\" },",
									"      \"starred\": { \"type\": \"boolean\" },",
									"      \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"      \"prefs\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"permissionLevel\": { \"type\": \"string\" },",
									"          \"hideVotes\": { \"type\": \"boolean\" },",
									"          \"voting\": { \"type\": \"string\" },",
									"          \"comments\": { \"type\": \"string\" },",
									"          \"invitations\": { \"type\": \"string\" },",
									"          \"selfJoin\": { \"type\": \"boolean\" },",
									"          \"cardCovers\": { \"type\": \"boolean\" },",
									"          \"showCompleteStatus\": { \"type\": \"boolean\" },",
									"          \"cardCounts\": { \"type\": \"boolean\" },",
									"          \"isTemplate\": { \"type\": \"boolean\" },",
									"          \"cardAging\": { \"type\": \"string\" },",
									"          \"calendarFeedEnabled\": { \"type\": \"boolean\" },",
									"          \"hiddenPluginBoardButtons\": { \"type\": \"array\" },",
									"          \"switcherViews\": { \"type\": \"array\" },",
									"          \"autoArchive\": { \"type\": [\"string\", \"null\"] },",
									"          \"background\": { \"type\": \"string\" },",
									"          \"backgroundColor\": { \"type\": \"string\" },",
									"          \"backgroundDarkColor\": { \"type\": [\"string\", \"null\"] },",
									"          \"backgroundImage\": { \"type\": [\"string\", \"null\"] },",
									"          \"backgroundDarkImage\": { \"type\": [\"string\", \"null\"] },",
									"          \"backgroundImageScaled\": { \"type\": [\"array\", \"null\"] },",
									"          \"backgroundTile\": { \"type\": \"boolean\" },",
									"          \"backgroundBrightness\": { \"type\": \"string\" },",
									"          \"sharedSourceUrl\": { \"type\": [\"string\", \"null\"] },",
									"          \"backgroundBottomColor\": { \"type\": \"string\" },",
									"          \"backgroundTopColor\": { \"type\": \"string\" },",
									"          \"canBePublic\": { \"type\": \"boolean\" },",
									"          \"canBeEnterprise\": { \"type\": \"boolean\" },",
									"          \"canBeOrg\": { \"type\": \"boolean\" },",
									"          \"canBePrivate\": { \"type\": \"boolean\" },",
									"          \"canInvite\": { \"type\": \"boolean\" }",
									"        },",
									"        \"required\": [",
									"          \"permissionLevel\",",
									"          \"hideVotes\",",
									"          \"voting\",",
									"          \"comments\",",
									"          \"invitations\",",
									"          \"selfJoin\",",
									"          \"cardCovers\",",
									"          \"showCompleteStatus\",",
									"          \"cardCounts\",",
									"          \"isTemplate\",",
									"          \"cardAging\",",
									"          \"calendarFeedEnabled\",",
									"          \"hiddenPluginBoardButtons\",",
									"          \"switcherViews\",",
									"          \"autoArchive\",",
									"          \"background\",",
									"          \"backgroundColor\",",
									"          \"backgroundDarkColor\",",
									"          \"backgroundImage\",",
									"          \"backgroundDarkImage\",",
									"          \"backgroundImageScaled\",",
									"          \"backgroundTile\",",
									"          \"backgroundBrightness\",",
									"          \"sharedSourceUrl\",",
									"          \"backgroundBottomColor\",",
									"          \"backgroundTopColor\",",
									"          \"canBePublic\",",
									"          \"canBeEnterprise\",",
									"          \"canBeOrg\",",
									"          \"canBePrivate\",",
									"          \"canInvite\"",
									"        ]",
									"      },",
									"      \"shortLink\": { \"type\": \"string\" },",
									"      \"subscribed\": { \"type\": \"boolean\" },",
									"      \"labelNames\": { \"type\": \"object\" },",
									"      \"powerUps\": { \"type\": \"array\" },",
									"      \"dateLastActivity\": { \"type\": [\"string\", \"null\"], \"format\": \"date-time\" },",
									"      \"dateLastView\": { \"type\": [\"string\", \"null\"], \"format\": \"date-time\" },",
									"      \"shortUrl\": { \"type\": \"string\", \"format\": \"uri\" },",
									"      \"idTags\": { \"type\": \"array\" },",
									"      \"datePluginDisable\": { \"type\": [\"string\", \"null\"] },",
									"      \"creationMethod\": { \"type\": [\"string\", \"null\"] },",
									"      \"ixUpdate\": { \"type\": \"string\" },",
									"      \"templateGallery\": { \"type\": [\"string\", \"null\"] },",
									"      \"enterpriseOwned\": { \"type\": \"boolean\" },",
									"      \"idBoardSource\": { \"type\": [\"string\", \"null\"] },",
									"      \"premiumFeatures\": { \"type\": \"array\" },",
									"      \"idMemberCreator\": { \"type\": \"string\" },",
									"      \"type\": { \"type\": [\"string\", \"null\"] },",
									"      \"memberships\": {",
									"        \"type\": \"array\",",
									"        \"items\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": { \"type\": \"string\" },",
									"            \"idMember\": { \"type\": \"string\" },",
									"            \"memberType\": { \"type\": \"string\" },",
									"            \"unconfirmed\": { \"type\": \"boolean\" },",
									"            \"deactivated\": { \"type\": \"boolean\" }",
									"          },",
									"          \"required\": [\"id\", \"idMember\", \"memberType\", \"unconfirmed\", \"deactivated\"]",
									"        }",
									"      }",
									"    },",
									"    \"required\": [",
									"      \"id\",",
									"      \"nodeId\",",
									"      \"name\",",
									"      \"desc\",",
									"      \"descData\",",
									"      \"closed\",",
									"      \"dateClosed\",",
									"      \"idOrganization\",",
									"      \"idEnterprise\",",
									"      \"limits\",",
									"      \"pinned\",",
									"      \"starred\",",
									"      \"url\",",
									"      \"prefs\",",
									"      \"shortLink\",",
									"      \"subscribed\",",
									"      \"labelNames\",",
									"      \"powerUps\",",
									"      \"dateLastActivity\",",
									"      \"dateLastView\",",
									"      \"shortUrl\",",
									"      \"idTags\",",
									"      \"datePluginDisable\",",
									"      \"creationMethod\",",
									"      \"ixUpdate\",",
									"      \"templateGallery\",",
									"      \"enterpriseOwned\",",
									"      \"idBoardSource\",",
									"      \"premiumFeatures\",",
									"      \"idMemberCreator\",",
									"      \"type\",",
									"      \"memberships\"",
									"    ]",
									"  }",
									"};",
									"",
									"pm.test(\"Response has correct schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/members/me/boards?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"members",
								"me",
								"boards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\");",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"X-Server-Time\");",
									"    pm.response.to.have.header(\"Referrer-Policy\");",
									"    pm.response.to.have.header(\"Content-Length\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Body ---",
									"pm.test('Board is created', () => {",
									"    pm.expect(response.closed).to.be.false;",
									"    pm.expect(response.prefs.permissionLevel).to.eql('private');",
									"});",
									"",
									"pm.test(\"Board name has expected value\", () => {",
									"    const expectedName = pm.collectionVariables.get(\"newBoardName\");",
									"    pm.expect(response.name).to.eql(expectedName);",
									"});",
									"",
									"// --- Schema ---",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"desc\": { \"type\": \"string\" },",
									"        \"descData\": { \"type\": [\"null\", \"string\"] },",
									"        \"closed\": { \"type\": \"boolean\" },",
									"        \"idOrganization\": { \"type\": \"string\" },",
									"        \"idEnterprise\": { \"type\": [\"null\", \"string\"] },",
									"        \"pinned\": { \"type\": \"boolean\" },",
									"        \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"        \"shortUrl\": { \"type\": \"string\", \"format\": \"uri\" },",
									"        \"prefs\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissionLevel\": { \"type\": \"string\" },",
									"                \"hideVotes\": { \"type\": \"boolean\" },",
									"                \"voting\": {\"type\": \"string\"},",
									"                \"comments\": { \"type\": \"string\" },",
									"                \"invitations\": { \"type\": \"string\" },",
									"                \"selfJoin\": { \"type\": \"boolean\" },",
									"                \"cardCovers\": { \"type\": \"boolean\" },",
									"                \"showCompleteStatus\": { \"type\": \"boolean\" },",
									"                \"cardCounts\": { \"type\": \"boolean\" },",
									"                \"isTemplate\": { \"type\": \"boolean\" }, ",
									"                \"cardAging\": { \"type\": \"string\" },",
									"                \"calendarFeedEnabled\": { \"type\": \"boolean\" },",
									"                \"hiddenPluginBoardButtons\": { \"type\": \"array\" },",
									"                \"switcherViews\": { \"type\": \"array\" },",
									"                \"autoArchive\": { \"type\": [\"null\", \"string\"] },",
									"                \"background\": { \"type\": \"string\" },",
									"                \"backgroundColor\": { \"type\": \"string\" },",
									"                \"backgroundDarkColor\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundImage\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundDarkImage\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundImageScaled\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundTile\": { \"type\": \"boolean\" },",
									"                \"backgroundBrightness\": { \"type\": \"string\" },",
									"                \"sharedSourceUrl\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundBottomColor\": { \"type\": \"string\" },",
									"                \"backgroundTopColor\": { \"type\": \"string\" },",
									"                \"canBePublic\": { \"type\": \"boolean\" },",
									"                \"canBeEnterprise\": { \"type\": \"boolean\" },",
									"                \"canBeOrg\": { \"type\": \"boolean\" },",
									"                \"canBePrivate\": { \"type\": \"boolean\" },",
									"                \"canInvite\": { \"type\": \"boolean\" }",
									"            },",
									"            \"required\": [",
									"                \"permissionLevel\",",
									"                \"hideVotes\",",
									"                \"voting\",",
									"                \"comments\",",
									"                \"invitations\",",
									"                \"selfJoin\",",
									"                \"cardCovers\",",
									"                \"showCompleteStatus\",",
									"                \"cardCounts\",",
									"                \"isTemplate\", ",
									"                \"cardAging\",",
									"                \"calendarFeedEnabled\",",
									"                \"hiddenPluginBoardButtons\",",
									"                \"switcherViews\",",
									"                \"autoArchive\",",
									"                \"background\",",
									"                \"backgroundColor\",",
									"                \"backgroundDarkColor\",",
									"                \"backgroundImage\",",
									"                \"backgroundDarkImage\",",
									"                \"backgroundImageScaled\",",
									"                \"backgroundTile\",",
									"                \"backgroundBrightness\",",
									"                \"sharedSourceUrl\",",
									"                \"backgroundBottomColor\",",
									"                \"backgroundTopColor\",",
									"                \"canBePublic\",",
									"                \"canBeEnterprise\",",
									"                \"canBeOrg\",",
									"                \"canBePrivate\",",
									"                \"canInvite\"",
									"            ]",
									"        },",
									"        \"labelNames\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"green\": { \"type\": \"string\" },",
									"                \"yellow\": { \"type\": \"string\" },",
									"                \"orange\": { \"type\": \"string\" },",
									"                \"red\": { \"type\": \"string\" },",
									"                \"purple\": { \"type\": \"string\" },",
									"                \"blue\": { \"type\": \"string\" },",
									"                \"sky\": { \"type\": \"string\" },",
									"                \"lime\": { \"type\": \"string\" },",
									"                \"pink\": { \"type\": \"string\" },",
									"                \"black\": { \"type\": \"string\" },",
									"                \"green_dark\": { \"type\": \"string\" },",
									"                \"yellow_dark\": { \"type\": \"string\" },",
									"                \"orange_dark\": { \"type\": \"string\" },",
									"                \"red_dark\": { \"type\": \"string\" },",
									"                \"purple_dark\": { \"type\": \"string\" },",
									"                \"blue_dark\": { \"type\": \"string\" },",
									"                \"sky_dark\": { \"type\": \"string\" },",
									"                \"lime_light\": { \"type\": \"string\" },",
									"                \"pink_light\": { \"type\": \"string\" },",
									"                \"black_light\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [",
									"                \"green\",",
									"                \"yellow\",",
									"                \"orange\",",
									"                \"red\",",
									"                \"purple\",",
									"                \"blue\",",
									"                \"sky\",",
									"                \"lime\",",
									"                \"pink\",",
									"                \"black\",",
									"                \"green_dark\",",
									"                \"yellow_dark\",",
									"                \"orange_dark\",",
									"                \"red_dark\",",
									"                \"purple_dark\",",
									"                \"blue_dark\",",
									"                \"sky_dark\",",
									"                \"lime_light\",",
									"                \"pink_light\",",
									"                \"black_light\"",
									"            ]",
									"        },",
									"        \"limits\": { \"type\": \"object\" }",
									"    }, \"required\": [",
									"        \"id\",",
									"        \"name\", ",
									"        \"desc\",",
									"        \"descData\",",
									"        \"closed\",",
									"        \"idOrganization\",",
									"        \"idEnterprise\",",
									"        \"pinned\",",
									"        \"url\", ",
									"        \"shortUrl\",",
									"        \"prefs\",",
									"        \"labelNames\",",
									"        \"limits\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Response has correct schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.collectionVariables.set('newBoardId',response.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Name + random number",
									"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1);",
									"",
									"pm.collectionVariables.set(\"newBoardName\", boardName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/boards/?name={{newBoardName}}&key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{newBoardName}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\");",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"X-Server-Time\");",
									"    pm.response.to.have.header(\"Referrer-Policy\");",
									"    pm.response.to.have.header(\"Content-Length\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Body ---",
									"pm.test('Body values', () => {",
									"    pm.expect(response.closed).to.be.false;",
									"    pm.expect(response.pinned).to.be.false;",
									"    pm.expect(response.prefs.permissionLevel).to.eql('private');",
									"    pm.expect(response.prefs.comments).to.eql('members');",
									"    pm.expect(response.prefs.invitations).to.eql('members');",
									"});",
									"",
									"pm.test(\"Board name has expected value\", () => {",
									"    const expectedName = pm.collectionVariables.get(\"newBoardName\");",
									"    pm.expect(response.name).to.eql(expectedName);",
									"});",
									"",
									"// --- Schema ---",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"desc\": { \"type\": \"string\" },",
									"        \"descData\": { \"type\": [\"null\", \"string\"] },",
									"        \"closed\": { \"type\": \"boolean\" },",
									"        \"idOrganization\": { \"type\": \"string\" },",
									"        \"idEnterprise\": { \"type\": [\"null\", \"string\"] },",
									"        \"pinned\": { \"type\": \"boolean\" },",
									"        \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"        \"shortUrl\": { \"type\": \"string\", \"format\": \"uri\" },",
									"        \"prefs\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissionLevel\": { \"type\": \"string\" },",
									"                \"hideVotes\": { \"type\": \"boolean\" },",
									"                \"voting\": {\"type\": \"string\"},",
									"                \"comments\": { \"type\": \"string\" },",
									"                \"invitations\": { \"type\": \"string\" },",
									"                \"selfJoin\": { \"type\": \"boolean\" },",
									"                \"cardCovers\": { \"type\": \"boolean\" },",
									"                \"showCompleteStatus\": { \"type\": \"boolean\" },",
									"                \"cardCounts\": { \"type\": \"boolean\" },",
									"                \"isTemplate\": { \"type\": \"boolean\" }, ",
									"                \"cardAging\": { \"type\": \"string\" },",
									"                \"calendarFeedEnabled\": { \"type\": \"boolean\" },",
									"                \"hiddenPluginBoardButtons\": { \"type\": \"array\" },",
									"                \"switcherViews\": { \"type\": \"array\" },",
									"                \"autoArchive\": { \"type\": [\"null\", \"string\"] },",
									"                \"background\": { \"type\": \"string\" },",
									"                \"backgroundColor\": { \"type\": \"string\" },",
									"                \"backgroundDarkColor\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundImage\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundDarkImage\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundImageScaled\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundTile\": { \"type\": \"boolean\" },",
									"                \"backgroundBrightness\": { \"type\": \"string\" },",
									"                \"sharedSourceUrl\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundBottomColor\": { \"type\": \"string\" },",
									"                \"backgroundTopColor\": { \"type\": \"string\" },",
									"                \"canBePublic\": { \"type\": \"boolean\" },",
									"                \"canBeEnterprise\": { \"type\": \"boolean\" },",
									"                \"canBeOrg\": { \"type\": \"boolean\" },",
									"                \"canBePrivate\": { \"type\": \"boolean\" },",
									"                \"canInvite\": { \"type\": \"boolean\" }",
									"            },",
									"            \"required\": [",
									"                \"permissionLevel\",",
									"                \"hideVotes\",",
									"                \"voting\",",
									"                \"comments\",",
									"                \"invitations\",",
									"                \"selfJoin\",",
									"                \"cardCovers\",",
									"                \"showCompleteStatus\",",
									"                \"cardCounts\",",
									"                \"isTemplate\", ",
									"                \"cardAging\",",
									"                \"calendarFeedEnabled\",",
									"                \"hiddenPluginBoardButtons\",",
									"                \"switcherViews\",",
									"                \"autoArchive\",",
									"                \"background\",",
									"                \"backgroundColor\",",
									"                \"backgroundDarkColor\",",
									"                \"backgroundImage\",",
									"                \"backgroundDarkImage\",",
									"                \"backgroundImageScaled\",",
									"                \"backgroundTile\",",
									"                \"backgroundBrightness\",",
									"                \"sharedSourceUrl\",",
									"                \"backgroundBottomColor\",",
									"                \"backgroundTopColor\",",
									"                \"canBePublic\",",
									"                \"canBeEnterprise\",",
									"                \"canBeOrg\",",
									"                \"canBePrivate\",",
									"                \"canInvite\"",
									"            ]",
									"        },",
									"        \"labelNames\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"green\": { \"type\": \"string\" },",
									"                \"yellow\": { \"type\": \"string\" },",
									"                \"orange\": { \"type\": \"string\" },",
									"                \"red\": { \"type\": \"string\" },",
									"                \"purple\": { \"type\": \"string\" },",
									"                \"blue\": { \"type\": \"string\" },",
									"                \"sky\": { \"type\": \"string\" },",
									"                \"lime\": { \"type\": \"string\" },",
									"                \"pink\": { \"type\": \"string\" },",
									"                \"black\": { \"type\": \"string\" },",
									"                \"green_dark\": { \"type\": \"string\" },",
									"                \"yellow_dark\": { \"type\": \"string\" },",
									"                \"orange_dark\": { \"type\": \"string\" },",
									"                \"red_dark\": { \"type\": \"string\" },",
									"                \"purple_dark\": { \"type\": \"string\" },",
									"                \"blue_dark\": { \"type\": \"string\" },",
									"                \"sky_dark\": { \"type\": \"string\" },",
									"                \"lime_light\": { \"type\": \"string\" },",
									"                \"pink_light\": { \"type\": \"string\" },",
									"                \"black_light\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [",
									"                \"green\",",
									"                \"yellow\",",
									"                \"orange\",",
									"                \"red\",",
									"                \"purple\",",
									"                \"blue\",",
									"                \"sky\",",
									"                \"lime\",",
									"                \"pink\",",
									"                \"black\",",
									"                \"green_dark\",",
									"                \"yellow_dark\",",
									"                \"orange_dark\",",
									"                \"red_dark\",",
									"                \"purple_dark\",",
									"                \"blue_dark\",",
									"                \"sky_dark\",",
									"                \"lime_light\",",
									"                \"pink_light\",",
									"                \"black_light\"",
									"            ]",
									"        }",
									"    }, \"required\": [",
									"        \"id\",",
									"        \"name\", ",
									"        \"desc\",",
									"        \"descData\",",
									"        \"closed\",",
									"        \"idOrganization\",",
									"        \"idEnterprise\",",
									"        \"pinned\",",
									"        \"url\", ",
									"        \"shortUrl\",",
									"        \"prefs\",",
									"        \"labelNames\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Response has correct schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/boards/{{newBoardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"boards",
								"{{newBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\");",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"X-Server-Time\");",
									"    pm.response.to.have.header(\"Referrer-Policy\");",
									"    pm.response.to.have.header(\"Content-Length\");",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"})",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Body ---",
									"const response = pm.response.json();",
									"",
									"pm.test('Board is deleted', () => {",
									"    pm.expect(response._value).to.eql(null);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/boards/{{newBoardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"boards",
								"{{newBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\");",
									"    pm.response.to.have.header(\"Date\");",
									"    pm.response.to.have.header(\"Referrer-Policy\");",
									"    pm.response.to.have.header(\"Content-Length\");",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// --- Body ---",
									"const response = pm.response.text();",
									"",
									"pm.test(\"Response body contains 'The requested resource was not found.'\", () => {",
									"    pm.expect(response).to.include(\"The requested resource was not found.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/boards/{{newBoardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"boards",
								"{{newBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500)",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get All Boards",
					"item": [
						{
							"name": "Get All Boards - Missing Api Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid key'\", () => {",
											"    pm.expect(response).to.include(\"invalid key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/members/me/boards?key=&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"members",
										"me",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Boards - Invalid Api Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid key'\", () => {",
											"    pm.expect(response).to.include(\"invalid key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/members/me/boards?key=c34cc55d655a3f444c58f9743f03454&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"members",
										"me",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": "c34cc55d655a3f444c58f9743f03454"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Boards - Missing API Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid token'\", () => {",
											"    pm.expect(response).to.include(\"invalid token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/members/me/boards?key={{APIKey}}&token=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"members",
										"me",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Boards - Invalid API Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid app token'\", () => {",
											"    pm.expect(response).to.include(\"invalid app token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/members/me/boards?key={{APIKey}}&token=ATTA34cc233a7b05bb54bf65f98dbbb5fa1067427827d8555cf1833522b921255551FF6B398K",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"members",
										"me",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "ATTA34cc233a7b05bb54bf65f98dbbb5fa1067427827d8555cf1833522b921255551FF6B398K"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Boards - Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'Cannot GET'\", () => {",
											"    pm.expect(response).to.include(\"Cannot GET /1/mmbers/me/boards?key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/mmbers/me/boards?key={{APIKey}}&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"mmbers",
										"me",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Boards - Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'Cannot POST'\", () => {",
											"    pm.expect(response).to.include(\"Cannot POST /1/members/me/boards?key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/members/me/boards?key={{APIKey}}&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"members",
										"me",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Board",
					"item": [
						{
							"name": "Create Board - Too Long Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Server\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 413\", () => {",
											"    pm.response.to.have.status(413);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Generate random string function",
											"function generateString(length) {",
											"    let result = '';",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    const charactersLength = characters.length;",
											"",
											"    for (let i = 0; i < length; i++) {",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"// Generate 16385 characters string",
											"let bigString = generateString(16385);",
											"",
											"",
											"pm.variables.set(\"invalidBoardName\", bigString);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name={{invalidBoardName}}inv&key={{APIKey}}&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{invalidBoardName}}inv"
										},
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Missing Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response body contains 'message' and 'error'\", () => {",
											"    pm.expect(response.message).to.include(\"invalid value for name\");",
											"    pm.expect(response.error).to.include(\"ERROR\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name=&key={{APIKey}}&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Missing API Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid key'\", () => {",
											"    pm.expect(response).to.include(\"invalid key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Name + random number",
											"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1);",
											"",
											"pm.collectionVariables.set(\"newBoardName\", boardName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name={{newBoardName}}&key=c34cc55d655a3f444c58f9743f03454&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{newBoardName}}"
										},
										{
											"key": "key",
											"value": "c34cc55d655a3f444c58f9743f03454"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Invalid API Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid key'\", () => {",
											"    pm.expect(response).to.include(\"invalid key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Name + random number",
											"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1);",
											"",
											"pm.collectionVariables.set(\"newBoardName\", boardName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name={{newBoardName}}&key=&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{newBoardName}}"
										},
										{
											"key": "key",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Missing API Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response body contains 'message'\", () => {",
											"    pm.expect(response.message).to.include(\"missing scopes\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Name + random number",
											"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1);",
											"",
											"pm.collectionVariables.set(\"newBoardName\", boardName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name={{newBoardName}}&key={{APIKey}}&token=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{newBoardName}}"
										},
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Invalid API Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 401\", () => {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'invalid app token'\", () => {",
											"    pm.expect(response).to.include(\"invalid app token\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Name + random number",
											"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1);",
											"",
											"pm.collectionVariables.set(\"newBoardName\", boardName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name={{newBoardName}}&key={{APIKey}}&token=ATTA34cc233a7b05bb54bf65f98dbbb5fa1067427827d8555cf1833522b921255551FF6B398K",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{newBoardName}}"
										},
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "ATTA34cc233a7b05bb54bf65f98dbbb5fa1067427827d8555cf1833522b921255551FF6B398K"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'Cannot PUT'\", () => {",
											"    pm.expect(response).to.include(\"Cannot PUT /1/boards/?name\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Name + random number",
											"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1)",
											"",
											"pm.collectionVariables.set(\"newBoardName\", boardName)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boards/?name={{newBoardName}}&key={{APIKey}}&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{newBoardName}}"
										},
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Board - Invalid Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Headers ---",
											"pm.test(\"Presence of Headers\", () => {",
											"    pm.response.to.have.header(\"Connection\");",
											"    pm.response.to.have.header(\"Date\");",
											"    pm.response.to.have.header(\"Referrer-Policy\");",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"// --- Status ---",
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// --- Body ---",
											"const response = pm.response.text();",
											"",
											"pm.test(\"Response body contains 'Cannot POST'\", () => {",
											"    pm.expect(response).to.include(\"Cannot POST /1/boars/?name\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Name + random number",
											"let boardName = \"Misha\" + (Math.floor(Math.random() * 1000) + 1);",
											"",
											"pm.collectionVariables.set(\"newBoardName\", boardName);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/1/boars/?name={{newBoardName}}&key={{APIKey}}&token={{APIToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"1",
										"boars",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{newBoardName}}"
										},
										{
											"key": "key",
											"value": "{{APIKey}}"
										},
										{
											"key": "token",
											"value": "{{APIToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Single Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"",
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\")",
									"    pm.response.to.have.header(\"Date\")",
									"    pm.response.to.have.header(\"X-Server-Time\")",
									"    pm.response.to.have.header(\"Referrer-Policy\")",
									"    pm.response.to.have.header(\"Content-Length\")",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\")",
									"})",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"// --- Body ---",
									"pm.test('Body values', () => {",
									"    pm.expect(response.closed).to.be.false",
									"    pm.expect(response.pinned).to.be.false",
									"    pm.expect(response.prefs.permissionLevel).to.eql('private')",
									"    pm.expect(response.prefs.comments).to.eql('members')",
									"    pm.expect(response.prefs.invitations).to.eql('members')",
									"})",
									"",
									"pm.test(\"Board name has expected value\", () => {",
									"    const expectedName = pm.collectionVariables.get(\"newBoardName\")",
									"    pm.expect(response.name).to.eql(expectedName)",
									"})",
									"",
									"// --- Schema ---",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"desc\": { \"type\": \"string\" },",
									"        \"descData\": { \"type\": [\"null\", \"string\"] },",
									"        \"closed\": { \"type\": \"boolean\" },",
									"        \"idOrganization\": { \"type\": \"string\" },",
									"        \"idEnterprise\": { \"type\": [\"null\", \"string\"] },",
									"        \"pinned\": { \"type\": \"boolean\" },",
									"        \"url\": { \"type\": \"string\", \"format\": \"uri\" },",
									"        \"shortUrl\": { \"type\": \"string\", \"format\": \"uri\" },",
									"        \"prefs\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"permissionLevel\": { \"type\": \"string\" },",
									"                \"hideVotes\": { \"type\": \"boolean\" },",
									"                \"voting\": {\"type\": \"string\"},",
									"                \"comments\": { \"type\": \"string\" },",
									"                \"invitations\": { \"type\": \"string\" },",
									"                \"selfJoin\": { \"type\": \"boolean\" },",
									"                \"cardCovers\": { \"type\": \"boolean\" },",
									"                \"showCompleteStatus\": { \"type\": \"boolean\" },",
									"                \"cardCounts\": { \"type\": \"boolean\" },",
									"                \"isTemplate\": { \"type\": \"boolean\" }, ",
									"                \"cardAging\": { \"type\": \"string\" },",
									"                \"calendarFeedEnabled\": { \"type\": \"boolean\" },",
									"                \"hiddenPluginBoardButtons\": { \"type\": \"array\" },",
									"                \"switcherViews\": { \"type\": \"array\" },",
									"                \"autoArchive\": { \"type\": [\"null\", \"string\"] },",
									"                \"background\": { \"type\": \"string\" },",
									"                \"backgroundColor\": { \"type\": \"string\" },",
									"                \"backgroundDarkColor\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundImage\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundDarkImage\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundImageScaled\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundTile\": { \"type\": \"boolean\" },",
									"                \"backgroundBrightness\": { \"type\": \"string\" },",
									"                \"sharedSourceUrl\": { \"type\": [\"null\", \"string\"] },",
									"                \"backgroundBottomColor\": { \"type\": \"string\" },",
									"                \"backgroundTopColor\": { \"type\": \"string\" },",
									"                \"canBePublic\": { \"type\": \"boolean\" },",
									"                \"canBeEnterprise\": { \"type\": \"boolean\" },",
									"                \"canBeOrg\": { \"type\": \"boolean\" },",
									"                \"canBePrivate\": { \"type\": \"boolean\" },",
									"                \"canInvite\": { \"type\": \"boolean\" }",
									"            },",
									"            \"required\": [",
									"                \"permissionLevel\",",
									"                \"hideVotes\",",
									"                \"voting\",",
									"                \"comments\",",
									"                \"invitations\",",
									"                \"selfJoin\",",
									"                \"cardCovers\",",
									"                \"showCompleteStatus\",",
									"                \"cardCounts\",",
									"                \"isTemplate\", ",
									"                \"cardAging\",",
									"                \"calendarFeedEnabled\",",
									"                \"hiddenPluginBoardButtons\",",
									"                \"switcherViews\",",
									"                \"autoArchive\",",
									"                \"background\",",
									"                \"backgroundColor\",",
									"                \"backgroundDarkColor\",",
									"                \"backgroundImage\",",
									"                \"backgroundDarkImage\",",
									"                \"backgroundImageScaled\",",
									"                \"backgroundTile\",",
									"                \"backgroundBrightness\",",
									"                \"sharedSourceUrl\",",
									"                \"backgroundBottomColor\",",
									"                \"backgroundTopColor\",",
									"                \"canBePublic\",",
									"                \"canBeEnterprise\",",
									"                \"canBeOrg\",",
									"                \"canBePrivate\",",
									"                \"canInvite\"",
									"            ]",
									"        },",
									"        \"labelNames\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"green\": { \"type\": \"string\" },",
									"                \"yellow\": { \"type\": \"string\" },",
									"                \"orange\": { \"type\": \"string\" },",
									"                \"red\": { \"type\": \"string\" },",
									"                \"purple\": { \"type\": \"string\" },",
									"                \"blue\": { \"type\": \"string\" },",
									"                \"sky\": { \"type\": \"string\" },",
									"                \"lime\": { \"type\": \"string\" },",
									"                \"pink\": { \"type\": \"string\" },",
									"                \"black\": { \"type\": \"string\" },",
									"                \"green_dark\": { \"type\": \"string\" },",
									"                \"yellow_dark\": { \"type\": \"string\" },",
									"                \"orange_dark\": { \"type\": \"string\" },",
									"                \"red_dark\": { \"type\": \"string\" },",
									"                \"purple_dark\": { \"type\": \"string\" },",
									"                \"blue_dark\": { \"type\": \"string\" },",
									"                \"sky_dark\": { \"type\": \"string\" },",
									"                \"lime_light\": { \"type\": \"string\" },",
									"                \"pink_light\": { \"type\": \"string\" },",
									"                \"black_light\": { \"type\": \"string\" }",
									"            },",
									"            \"required\": [",
									"                \"green\",",
									"                \"yellow\",",
									"                \"orange\",",
									"                \"red\",",
									"                \"purple\",",
									"                \"blue\",",
									"                \"sky\",",
									"                \"lime\",",
									"                \"pink\",",
									"                \"black\",",
									"                \"green_dark\",",
									"                \"yellow_dark\",",
									"                \"orange_dark\",",
									"                \"red_dark\",",
									"                \"purple_dark\",",
									"                \"blue_dark\",",
									"                \"sky_dark\",",
									"                \"lime_light\",",
									"                \"pink_light\",",
									"                \"black_light\"",
									"            ]",
									"        }",
									"    }, \"required\": [",
									"        \"id\",",
									"        \"name\", ",
									"        \"desc\",",
									"        \"descData\",",
									"        \"closed\",",
									"        \"idOrganization\",",
									"        \"idEnterprise\",",
									"        \"pinned\",",
									"        \"url\", ",
									"        \"shortUrl\",",
									"        \"prefs\",",
									"        \"labelNames\"",
									"    ]",
									"}",
									"",
									"pm.test(\"Response has correct schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema)",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/boards/{{newBoardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"boards",
								"{{newBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Headers ---",
									"pm.test(\"Presence of Headers\", () => {",
									"    pm.response.to.have.header(\"Connection\")",
									"    pm.response.to.have.header(\"Date\")",
									"    pm.response.to.have.header(\"X-Server-Time\")",
									"    pm.response.to.have.header(\"Referrer-Policy\")",
									"    pm.response.to.have.header(\"Content-Length\")",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\")",
									"})",
									"",
									"// --- Status ---",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"// --- Body ---",
									"const response = pm.response.json()",
									"",
									"pm.test('Board is deleted', () => {",
									"    pm.expect(response._value).to.eql(null)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/1/boards/{{newBoardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"1",
								"boards",
								"{{newBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "newBoardName",
			"value": ""
		},
		{
			"key": "newBoardId",
			"value": ""
		}
	]
}